{'TMP': 'C:\\Users\\prk\\AppData\\Local\\Temp', 'PT7HOME': 'C:\\Program Files\\Cisco Packet Tracer 7.1', 'COMPUTERNAME': 'BN60318', 'VS140COMNTOOLS': 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\Tools\\', 'MOD_PATH': 'C:\\Program Files (x86)\\Silverfrost\\FTN95\\include', 'USERDOMAIN': 'BN60318', 'VS100COMNTOOLS': 'C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\Common7\\Tools\\', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules;C:\\Program Files (x86)\\Microsoft SQL Server\\130\\Tools\\PowerShell\\Modules\\', 'ANDROID_HOME': 'C:\\Users\\prk\\AppData\\Local\\Android\\Sdk', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 94 Stepping 3, GenuineIntel', 'PY_PYTHON': '3.6', 'VBOX_MSI_INSTALL_PATH': 'C:\\Program Files\\Oracle\\VirtualBox\\', 'PROGRAMFILES': 'C:\\Program Files', 'PROCESSOR_REVISION': '5e03', 'SYSTEMROOT': 'C:\\Windows', 'PATH': 'C:\\Anaconda2\\Library\\bin;C:\\Program Files\\Microsoft MPI\\Bin\\;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\nodejs\\;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\xampp\\php;C:\\ProgramData\\ComposerSetup\\bin;C:\\Program Files\\Microsoft\\Web Platform Installer\\;C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\130\\DTS\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\130\\DTS\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\130\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\Client SDK\\ODBC\\130\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\130\\Tools\\Binn\\ManagementStudio\\;C:\\Program Files (x86)\\Microsoft SQL Server\\110\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\140\\DTS\\Binn\\;C:\\TDM-GCC-64\\bin;C:\\Program Files\\Microsoft VS Code\\bin;C:\\Program Files (x86)\\Windows Live\\Shared;C:\\CGAL-4.11.3\\auxiliary\\gmp\\lib;C:\\Program Files\\PuTTY\\;C:\\Program Files\\IBM\\Cloud\\bin;C:\\Program Files (x86)\\SNMP Util;C:\\Program Files (x86)\\Gpg4win\\..\\GnuPG\\bin;C:\\Program Files\\Fpgrowth;C:\\Users\\prk\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\prk\\AppData\\Roaming\\npm;C:\\Users\\prk\\AppData\\Roaming\\Composer\\vendor\\bin;C:\\Python36\\Scripts;C:\\Users\\prk\\AppData\\Local\\Android\\Sdk\\tools;C:\\Users\\prk\\AppData\\Local\\Android\\Sdk\\platform-tools;', 'MSMPI_BIN': 'C:\\Program Files\\Microsoft MPI\\Bin\\', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'TEMP': 'C:\\Users\\prk\\AppData\\Local\\Temp', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'AGSDESKTOPJAVA': 'C:\\Program Files (x86)\\ArcGIS\\Desktop10.5\\', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'LOCALAPPDATA': 'C:\\Users\\prk\\AppData\\Local', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'HOMEPATH': '\\Users\\prk', 'USERDOMAIN_ROAMINGPROFILE': 'BN60318', 'CGAL_DIR': 'C:\\CGAL-4.11.3', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'prk', 'LOGONSERVER': '\\\\BN60318', 'QT_DEVICE_PIXEL_RATIO': 'auto', 'SESSIONNAME': 'Console', 'PROGRAMDATA': 'C:\\ProgramData', 'CLASSPATH': '.;.;C:\\PROGRA~2\\JMF21~1.1E\\lib\\sound.jar;C:\\PROGRA~2\\JMF21~1.1E\\lib\\jmf.jar;C:\\PROGRA~2\\JMF21~1.1E\\lib;', 'ONEDRIVE': 'C:\\Users\\prk\\OneDrive', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'PROMPT': '$P$G', 'PUBLIC': 'C:\\Users\\Public', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'MOZ_PLUGIN_PATH': 'C:\\Program Files (x86)\\Foxit Software\\Foxit Reader\\plugins\\', 'WINDIR': 'C:\\Windows', 'NLTK_DATA': 'E:\\NltkData', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'NUMBER_OF_PROCESSORS': '4', 'APPDATA': 'C:\\Users\\prk\\AppData\\Roaming', 'PROCESSOR_LEVEL': '6', 'F95INCLUDE': 'C:\\Program Files (x86)\\Silverfrost\\FTN95\\include', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'SNC_LIB': 'C:\\Program Files (x86)\\SAP\\FrontEnd\\SapGui\\Encryption\\secgss.dll', 'USERPROFILE': 'C:\\Users\\prk'}